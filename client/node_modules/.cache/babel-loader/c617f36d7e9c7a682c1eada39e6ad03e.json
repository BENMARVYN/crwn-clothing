{"ast":null,"code":"// import firebase from 'firebase/app';\n// import 'firebase/firestore';\n// import 'firebase/auth';\n// const config = {\n//   apiKey: \"AIzaSyAZ-x-A4IoJnqqNkVx_BDrc7Rf1DXfiEE8\",\n//   authDomain: \"crwn-db-a0b8f.firebaseapp.com\",\n//   databaseURL: \"https://crwn-db-a0b8f.firebaseio.com\",\n//   projectId: \"crwn-db-a0b8f\",\n//   storageBucket: \"crwn-db-a0b8f.appspot.com\",\n//   messagingSenderId: \"726659120283\",\n//   appId: \"1:726659120283:web:0b9b9468381f11f0dcda3e\",\n//   measurementId: \"G-R1WD96JL32\"\n// };\n// firebase.initializeApp(config);\n// export const createUserProfileDocument = async (userAuth, additionalData) => {\n//   if (!userAuth) return;\n//   const userRef = firestore.doc(`users/${userAuth.uid}`);\n//   const snapShot = await userRef.get();\n//   if (!snapShot.exists) {\n//     const { displayName, email } = userAuth;\n//     const createdAt = new Date();\n//     try {\n//       await userRef.set({\n//         displayName,\n//         email,\n//         createdAt,\n//         ...additionalData\n//       });\n//     } catch (error) {\n//       console.log('error creating user', error.message);\n//     }\n//   }\n//   return userRef;\n// };\n// export const addCollectionAndDocuments = async (\n//   collectionKey,\n//   objectsToAdd\n// ) => {\n//   const collectionRef = firestore.collection(collectionKey);\n//   const batch = firestore.batch();\n//   objectsToAdd.forEach(obj => {\n//     const newDocRef = collectionRef.doc();\n//     batch.set(newDocRef, obj);\n//   });\n//   return await batch.commit();\n// };\n// export const convertCollectionsSnapshotToMap = collections => {\n//   const transformedCollection = collections.docs.map(doc => {\n//     const { title, items } = doc.data();\n//     return {\n//       routeName: encodeURI(title.toLowerCase()),\n//       id: doc.id,\n//       title,\n//       items\n//     };\n//   });\n//   return transformedCollection.reduce((accumulator, collection) => {\n//     accumulator[collection.title.toLowerCase()] = collection;\n//     return accumulator;\n//   }, {});\n// };\n// export const auth = firebase.auth();\n// export const firestore = firebase.firestore();\n// const provider = new firebase.auth.GoogleAuthProvider();\n// provider.setCustomParameters({ prompt: 'select_account' });\n// export const signInWithGoogle = () => auth.signInWithPopup(provider);\n// export default firebase;\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAZ-x-A4IoJnqqNkVx_BDrc7Rf1DXfiEE8\",\n  authDomain: \"crwn-db-a0b8f.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-a0b8f.firebaseio.com\",\n  projectId: \"crwn-db-a0b8f\",\n  storageBucket: \"crwn-db-a0b8f.appspot.com\",\n  messagingSenderId: \"726659120283\",\n  appId: \"1:726659120283:web:0b9b9468381f11f0dcda3e\",\n  measurementId: \"G-R1WD96JL32\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc(); // batch.set(newDocRef, obj);\n\n    console.log(newDocRef);\n  }); // return await batch.commit();\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/home/ben/React + redux practice/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAQA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAGA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,+BAFC;AAGbC,EAAAA,WAAW,EAAE,sCAHA;AAIbC,EAAAA,SAAS,EAAE,eAJE;AAKbC,EAAAA,aAAa,EAAE,2BALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE,2CAPM;AAQbC,EAAAA,aAAa,EAAE;AARF,CAAf;AAWAT,QAAQ,CAACU,aAAT,CAAuBT,MAAvB;AAEA,OAAO,MAAMU,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGV;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;AACF;;AAED,SAAOf,OAAP;AACD,CAvBM;AAyBP,OAAO,MAAMgB,yBAAyB,GAAG,CACvCC,aADuC,EAEvCC,YAFuC,KAGpC;AACH,QAAMC,aAAa,GAAGlB,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB;AACA,QAAMI,KAAK,GAAGpB,SAAS,CAACoB,KAAV,EAAd;AACAH,EAAAA,YAAY,CAACI,OAAb,CAAqBC,GAAG,IAAI;AAC1B,UAAMC,SAAS,GAAGL,aAAa,CAACjB,GAAd,EAAlB,CAD0B,CAE1B;;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYU,SAAZ;AACD,GAJD,EAHG,CASH;AACD,CAbM;AAeP,OAAO,MAAMC,IAAI,GAAGvC,QAAQ,CAACuC,IAAT,EAAb;AACP,OAAO,MAAMxB,SAAS,GAAGf,QAAQ,CAACe,SAAT,EAAlB;AAEP,MAAMyB,QAAQ,GAAG,IAAIxC,QAAQ,CAACuC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAexC,QAAf","sourcesContent":["\n\n// import firebase from 'firebase/app';\n// import 'firebase/firestore';\n// import 'firebase/auth';\n\n// const config = {\n//   apiKey: \"AIzaSyAZ-x-A4IoJnqqNkVx_BDrc7Rf1DXfiEE8\",\n//   authDomain: \"crwn-db-a0b8f.firebaseapp.com\",\n//   databaseURL: \"https://crwn-db-a0b8f.firebaseio.com\",\n//   projectId: \"crwn-db-a0b8f\",\n//   storageBucket: \"crwn-db-a0b8f.appspot.com\",\n//   messagingSenderId: \"726659120283\",\n//   appId: \"1:726659120283:web:0b9b9468381f11f0dcda3e\",\n//   measurementId: \"G-R1WD96JL32\"\n// };\n\n// firebase.initializeApp(config);\n\n// export const createUserProfileDocument = async (userAuth, additionalData) => {\n//   if (!userAuth) return;\n\n//   const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n//   const snapShot = await userRef.get();\n\n//   if (!snapShot.exists) {\n//     const { displayName, email } = userAuth;\n//     const createdAt = new Date();\n//     try {\n//       await userRef.set({\n//         displayName,\n//         email,\n//         createdAt,\n//         ...additionalData\n//       });\n//     } catch (error) {\n//       console.log('error creating user', error.message);\n//     }\n//   }\n\n//   return userRef;\n// };\n\n// export const addCollectionAndDocuments = async (\n//   collectionKey,\n//   objectsToAdd\n// ) => {\n//   const collectionRef = firestore.collection(collectionKey);\n\n//   const batch = firestore.batch();\n//   objectsToAdd.forEach(obj => {\n//     const newDocRef = collectionRef.doc();\n//     batch.set(newDocRef, obj);\n//   });\n\n//   return await batch.commit();\n// };\n\n// export const convertCollectionsSnapshotToMap = collections => {\n//   const transformedCollection = collections.docs.map(doc => {\n//     const { title, items } = doc.data();\n\n//     return {\n//       routeName: encodeURI(title.toLowerCase()),\n//       id: doc.id,\n//       title,\n//       items\n//     };\n//   });\n\n//   return transformedCollection.reduce((accumulator, collection) => {\n//     accumulator[collection.title.toLowerCase()] = collection;\n//     return accumulator;\n//   }, {});\n// };\n\n// export const auth = firebase.auth();\n// export const firestore = firebase.firestore();\n\n// const provider = new firebase.auth.GoogleAuthProvider();\n// provider.setCustomParameters({ prompt: 'select_account' });\n// export const signInWithGoogle = () => auth.signInWithPopup(provider);\n\n// export default firebase;\n\n\n\n\n\n\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\n\nconst config = {\n  apiKey: \"AIzaSyAZ-x-A4IoJnqqNkVx_BDrc7Rf1DXfiEE8\",\n  authDomain: \"crwn-db-a0b8f.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-a0b8f.firebaseio.com\",\n  projectId: \"crwn-db-a0b8f\",\n  storageBucket: \"crwn-db-a0b8f.appspot.com\",\n  messagingSenderId: \"726659120283\",\n  appId: \"1:726659120283:web:0b9b9468381f11f0dcda3e\",\n  measurementId: \"G-R1WD96JL32\"\n};\n\nfirebase.initializeApp(config);\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\n\nexport const addCollectionAndDocuments = (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    // batch.set(newDocRef, obj);\n    console.log(newDocRef);\n  });\n\n  // return await batch.commit();\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}